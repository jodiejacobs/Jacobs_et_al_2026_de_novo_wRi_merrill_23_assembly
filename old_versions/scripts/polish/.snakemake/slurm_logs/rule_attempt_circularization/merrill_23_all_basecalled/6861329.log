host: phoenix-14.prism
Building DAG of jobs...
Using shell: /usr/bin/bash
Provided remote nodes: 1
Provided resources: mem_mb=100000, mem_mib=95368, disk_mb=1000, disk_mib=954
Select jobs to execute...
Execute 1 jobs...

[Mon Mar 10 11:47:17 2025]
rule attempt_circularization:
    input: /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz
    output: /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
    jobid: 0
    reason: Forced execution
    wildcards: sample=merrill_23_all_basecalled
    threads: 32
    resources: mem_mb=100000, mem_mib=95368, disk_mb=1000, disk_mib=954, tmpdir=<TBD>, slurm_partition=long, runtime=480

host: phoenix-14.prism
Building DAG of jobs...
Using shell: /usr/bin/bash
Provided cores: 32
Rules claiming more threads will be scaled down.
Provided resources: mem_mb=100000, mem_mib=95368, disk_mb=1000, disk_mib=954
Select jobs to execute...
Execute 1 jobs...

[Mon Mar 10 11:47:24 2025]
localrule attempt_circularization:
    input: /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz
    output: /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
    jobid: 0
    reason: Forced execution
    wildcards: sample=merrill_23_all_basecalled
    threads: 32
    resources: mem_mb=100000, mem_mib=95368, disk_mb=1000, disk_mib=954, tmpdir=/data/tmp, slurm_partition=long, runtime=480

WARNING: SPAdes version 4.1.0 is being used. It will work, but better results are usually obtained from Circlator using SPAdes version 3.7.1. Although 3.7.1 is not the latest version, we recommend it for Circlator.
Error making output directory /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links
WARNING: Didn't find canu in path. Looked for:canu
[Mon Mar 10 11:47:30 2025]
Error in rule attempt_circularization:
    jobid: 0
    input: /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz
    output: /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
    shell:
        
        # Create output directory
        mkdir -p /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/
        
        # Use Circlator to attempt to circularize the Wolbachia genome
        circlator all --threads 32 /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links
        
        # Check if the assembly was successfully circularized
        if grep -q "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links/06.fixstart.fasta; then
            # Use the LINKS-based circularized genome
            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links/06.fixstart.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta
            echo "Using LINKS-based circularized genome" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        else
            # Fall back to the non-circularized assembly
            LINKS_CONTIGS=$(grep -c "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta)
            
            # Use the LINKS assembly
            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta
            echo "Using LINKS assembly (not circularized). Contigs: $LINKS_CONTIGS" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        fi
        
        # Generate assembly statistics
        echo "===== Assembly Statistics =====" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "Date: $(date)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Count total contigs
        echo "Total contigs: $(grep -c "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Calculate N50, total size, etc.
        assembly-stats /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Check for circularity by looking for overlapping ends
        echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "===== Circularity Check =====" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Extract sequences for self-comparison
        seqtk seq -a /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa
        
        # For each contig, check if the start and end regions have overlap
        for SEQ in $(grep "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa | sed 's/>//'); do
            echo "Checking circularity of contig: $SEQ" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            
            # Extract the sequence
            seqtk subseq /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa <(echo "$SEQ") > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa
            
            # Get the length
            LENGTH=$(seqtk comp /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | cut -f 2)
            
            # Extract first and last 1000 bp (or less if contig is smaller)
            OVERLAP=1000
            if [ $LENGTH -lt 2000 ]; then
                OVERLAP=$(echo "$LENGTH / 4" | bc)
            fi
            
            # Get start and end regions
            START_SEQ=$(head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | tail -n1 | cut -c 1-$OVERLAP)
            END_SEQ=$(head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | tail -n1 | rev | cut -c 1-$OVERLAP | rev)
            
            # Check for overlap
            echo $START_SEQ > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa
            echo $END_SEQ > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa
            
            # Calculate similarity
            IDENTITY=$(dnadiff /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa 2>&1 | grep "AvgIdentity" | head -n1 | awk '{print $2}')
            
            echo "Terminal overlap identity: $IDENTITY%" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            if (( $(echo "$IDENTITY > 95" | bc -l) )); then
                echo "Appears to be circular (>95% terminal identity)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            else
                echo "May not be circular (<95% terminal identity)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            fi
            echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        done
        
        # Cleanup
        rm -f /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)

Shutting down, this might take some time.
Exiting because a job execution failed. Look above for error message
Storing output in storage.
WorkflowError:
At least one job did not complete successfully.
srun: error: phoenix-14: task 0: Exited with exit code 1
[Mon Mar 10 11:47:31 2025]
Error in rule attempt_circularization:
    jobid: 0
    input: /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz
    output: /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta, /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
    shell:
        
        # Create output directory
        mkdir -p /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/
        
        # Use Circlator to attempt to circularize the Wolbachia genome
        circlator all --threads 32 /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links
        
        # Check if the assembly was successfully circularized
        if grep -q "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links/06.fixstart.fasta; then
            # Use the LINKS-based circularized genome
            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//circlator_links/06.fixstart.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta
            echo "Using LINKS-based circularized genome" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        else
            # Fall back to the non-circularized assembly
            LINKS_CONTIGS=$(grep -c "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta)
            
            # Use the LINKS assembly
            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta
            echo "Using LINKS assembly (not circularized). Contigs: $LINKS_CONTIGS" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        fi
        
        # Generate assembly statistics
        echo "===== Assembly Statistics =====" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "Date: $(date)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Count total contigs
        echo "Total contigs: $(grep -c "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Calculate N50, total size, etc.
        assembly-stats /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Check for circularity by looking for overlapping ends
        echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        echo "===== Circularity Check =====" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        
        # Extract sequences for self-comparison
        seqtk seq -a /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa
        
        # For each contig, check if the start and end regions have overlap
        for SEQ in $(grep "^>" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa | sed 's/>//'); do
            echo "Checking circularity of contig: $SEQ" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            
            # Extract the sequence
            seqtk subseq /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa <(echo "$SEQ") > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa
            
            # Get the length
            LENGTH=$(seqtk comp /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | cut -f 2)
            
            # Extract first and last 1000 bp (or less if contig is smaller)
            OVERLAP=1000
            if [ $LENGTH -lt 2000 ]; then
                OVERLAP=$(echo "$LENGTH / 4" | bc)
            fi
            
            # Get start and end regions
            START_SEQ=$(head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | tail -n1 | cut -c 1-$OVERLAP)
            END_SEQ=$(head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa | tail -n1 | rev | cut -c 1-$OVERLAP | rev)
            
            # Check for overlap
            echo $START_SEQ > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa
            echo $END_SEQ > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa
            
            # Calculate similarity
            IDENTITY=$(dnadiff /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa 2>&1 | grep "AvgIdentity" | head -n1 | awk '{print $2}')
            
            echo "Terminal overlap identity: $IDENTITY%" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            if (( $(echo "$IDENTITY > 95" | bc -l) )); then
                echo "Appears to be circular (>95% terminal identity)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            else
                echo "May not be circular (<95% terminal identity)" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
            fi
            echo "" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt
        done
        
        # Cleanup
        rm -f /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//temp.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//single_contig.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled//end.fa
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)

Shutting down, this might take some time.
Exiting because a job execution failed. Look above for error message
Storing output in storage.
WorkflowError:
At least one job did not complete successfully.
