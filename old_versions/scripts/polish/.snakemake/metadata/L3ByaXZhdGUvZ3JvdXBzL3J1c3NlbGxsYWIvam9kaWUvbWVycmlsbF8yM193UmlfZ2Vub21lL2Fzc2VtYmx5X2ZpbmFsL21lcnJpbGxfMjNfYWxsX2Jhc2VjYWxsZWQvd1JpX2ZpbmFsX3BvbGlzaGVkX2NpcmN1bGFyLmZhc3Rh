{"code": "", "rule": "attempt_circularization", "input": ["/private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta", "/private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz"], "log": [], "params": ["'/private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/'", "'/private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp'"], "shellcmd": "\n        # Create output and temp directories\n        mkdir -p /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/\n        mkdir -p /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp\n        \n        # First, check if we already have a circular contig in the input assembly\n        # Extract sequences to temporary file\n        seqtk seq -a /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/input.fa\n        \n        # Find the longest contig (likely the Wolbachia genome)\n        LONGEST_CONTIG=$(seqtk comp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/input.fa | sort -k2,2nr | head -n1 | cut -f1)\n        \n        # Extract the longest contig\n        seqtk subseq /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/input.fa <(echo \"$LONGEST_CONTIG\") > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa\n        \n        # Get sequence length\n        LENGTH=$(seqtk comp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa | cut -f2)\n        \n        # Check for circularity of the longest contig by examining terminal repeats\n        if [ $LENGTH -gt 10000 ]; then\n            # Extract first and last 1000 bp\n            head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa | tail -n1 | cut -c 1-1000 > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa\n            head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa | tail -n1 | rev | cut -c 1-1000 | rev > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa\n            \n            # Use minimap2 for alignment\n            MATCHES=$(minimap2 -c /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa 2>/dev/null | wc -l)\n            \n            if [ $MATCHES -gt 0 ]; then\n                # Calculate identity using minimap2\n                IDENTITY=$(minimap2 -c /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa 2>/dev/null | awk '{ident=$10/$11*100} END {print ident}')\n                \n                if (( $(echo \"$IDENTITY > 95\" | bc -l) )); then\n                    # If circular, attempt to fix start position to dnaA gene\n                    echo \"Detected circular contig in input assembly\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n                    \n                    # Use minimap2 to align nanopore reads to the assembly for better support\n                    minimap2 -ax map-ont -t 10 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/nanopore_data/basecalled/merrill_23_all_basecalled.wRi.fastq.gz > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/aln.sam\n                    \n                    # Convert to sorted BAM\n                    samtools view -bS /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/aln.sam | samtools sort -o /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/aln.bam -\n                    samtools index /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/aln.bam\n                    \n                    # Find dnaA gene position (if available)\n                    prodigal -i /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa -a /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/proteins.faa -d /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/genes.fna -o /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/genes.gff\n                    \n                    # Look for dnaA gene\n                    if grep -q \"dnaA\" /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/proteins.faa; then\n                        # Extract the dnaA gene coordinates\n                        DNAA_COORDS=$(grep \"dnaA\" /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/genes.gff | head -n1 | cut -f4,5)\n                        START_POS=$(echo $DNAA_COORDS | cut -d' ' -f1)\n                        \n                        # Reorient the sequence to start at dnaA\n                        if [ ! -z \"$START_POS\" ]; then\n                            # Get the full sequence\n                            SEQ=$(tail -n+2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa)\n                            \n                            # Reorient to start at dnaA\n                            REORIENTED_SEQ=\"${SEQ:$START_POS}${SEQ:0:$START_POS}\"\n                            \n                            # Write the reoriented sequence\n                            echo \">$LONGEST_CONTIG circular=true\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/reoriented.fa\n                            echo \"$REORIENTED_SEQ\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/reoriented.fa\n                            \n                            # Use the reoriented sequence\n                            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/reoriented.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n                            echo \"Successfully reoriented circular genome to start at dnaA gene\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n                        else\n                            # If dnaA not found, use the original sequence\n                            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n                            echo \"Found circular genome but couldn't locate dnaA gene for reorientation\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n                        fi\n                    else\n                        # If dnaA not found, use the original sequence\n                        cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/longest_contig.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n                        echo \"Found circular genome but couldn't locate dnaA gene for reorientation\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n                    fi\n                else\n                    # Not circular, use original assembly\n                    cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n                    echo \"Contig appears non-circular (<95% terminal identity)\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n                fi\n            else\n                # Not circular, use original assembly\n                cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n                echo \"No terminal repeat detected, likely non-circular\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n            fi\n        else\n            # Too small, use original assembly\n            cp /private/groups/russelllab/jodie/merrill_23_wRi_genome/gapfilled/merrill_23_all_basecalled/wRi/links_gapfilled.fasta /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta\n            echo \"Contig too small for reliable circularity assessment\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt\n        fi\n        \n        # Generate assembly statistics\n        echo \"===== Assembly Statistics =====\" > /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        echo \"Date: $(date)\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        echo \"\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        \n        # Circularity status\n        echo \"===== Circularity Status =====\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        cat /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/circular_status.txt >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        echo \"\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        \n        # Count total contigs\n        echo \"Total contigs: $(grep -c \"^>\" /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta)\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        \n        # Calculate N50, total size, etc.\n        echo \"===== Assembly Metrics =====\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        assembly-stats /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        \n        # Detailed circularity analysis for all contigs\n        echo \"\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        echo \"===== Detailed Circularity Analysis =====\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        \n        # Extract sequences to temporary file\n        seqtk seq -a /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/wRi_final_polished_circular.fasta > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/final.fa\n        \n        # Process each contig\n        for SEQ in $(grep \"^>\" /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/final.fa | sed 's/>//' | sed 's/ .*//'); do\n            echo \"Checking circularity of contig: $SEQ\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n            \n            # Extract the sequence\n            seqtk subseq /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/final.fa <(echo \"$SEQ\") > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/contig.fa\n            \n            # Get sequence length\n            LENGTH=$(seqtk comp /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/contig.fa | cut -f 2)\n            \n            if [ $LENGTH -gt 2000 ]; then\n                # Extract first and last 1000 bp\n                head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/contig.fa | tail -n1 | cut -c 1-1000 > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa\n                head -n2 /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/contig.fa | tail -n1 | rev | cut -c 1-1000 | rev > /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa\n                \n                # Use minimap2 for alignment\n                MATCHES=$(minimap2 -c /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa 2>/dev/null | wc -l)\n                \n                if [ $MATCHES -gt 0 ]; then\n                    # Calculate identity using minimap2\n                    IDENTITY=$(minimap2 -c /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/start.fa /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp/end.fa 2>/dev/null | awk '{ident=$10/$11*100} END {print ident}')\n                    echo \"Terminal overlap identity: $IDENTITY%\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n                    \n                    if (( $(echo \"$IDENTITY > 95\" | bc -l) )); then\n                        echo \"Appears to be circular (>95% terminal identity)\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n                    else\n                        echo \"May not be circular (<95% terminal identity)\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n                    fi\n                else\n                    echo \"No terminal overlap detected\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n                fi\n            else\n                echo \"Contig too small for reliable circularity check (<2000 bp)\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n            fi\n            echo \"\" >> /private/groups/russelllab/jodie/merrill_23_wRi_genome/assembly_final/merrill_23_all_basecalled/assembly_stats.txt\n        done\n        \n        # Cleanup temporary files\n        rm -rf /private/groups/russelllab/jodie/merrill_23_wRi_genome/tmp/merrill_23_all_basecalled_assembly_tmp\n        ", "incomplete": false, "starttime": 1741639074.45466, "endtime": 1741639100.2575045, "job_hash": 8757669619734, "conda_env": null, "container_img_url": null, "input_checksums": {}}